/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgres://username:password@aws-0-us-east-1.pooler.supabase.com:6543/postgres -t customers -t prices -t problems -t products -t subscriptions -t upvotes -t users -s public
 *
 */


export type Json = unknown;
export type pricing_plan_interval = 'day' | 'month' | 'week' | 'year';
export type pricing_type = 'one_time' | 'recurring';
export type subscription_status = 'active' | 'canceled' | 'incomplete' | 'incomplete_expired' | 'past_due' | 'paused' | 'trialing' | 'unpaid';

// Table customers
export interface Customers {
  id: string;
  stripe_customer_id: string | null;
}
export interface CustomersInput {
  id: string;
  stripe_customer_id?: string | null;
}
const customers = {
  tableName: 'customers',
  columns: ['id', 'stripe_customer_id'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as Customers,
  $input: null as unknown as CustomersInput
} as const;

// Table prices
export interface Prices {
  id: string;
  product_id: string | null;
  active: boolean | null;
  description: string | null;
  unit_amount: number | null;
  currency: string | null;
  type: pricing_type | null;
  interval: pricing_plan_interval | null;
  interval_count: number | null;
  trial_period_days: number | null;
  metadata: Json | null;
}
export interface PricesInput {
  id: string;
  product_id?: string | null;
  active?: boolean | null;
  description?: string | null;
  unit_amount?: number | null;
  currency?: string | null;
  type?: pricing_type | null;
  interval?: pricing_plan_interval | null;
  interval_count?: number | null;
  trial_period_days?: number | null;
  metadata?: Json | null;
}
const prices = {
  tableName: 'prices',
  columns: ['id', 'product_id', 'active', 'description', 'unit_amount', 'currency', 'type', 'interval', 'interval_count', 'trial_period_days', 'metadata'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { product_id: { table: 'products', column: 'id', $type: null as unknown as Products }, },
  $type: null as unknown as Prices,
  $input: null as unknown as PricesInput
} as const;

// Table problems
export interface Problems {
  id: string;
  user_id: string;
  title: string;
  description: string | null;
  created_at: Date | null;
  upvotes_count: number | null;
}
export interface ProblemsInput {
  id?: string;
  user_id: string;
  title: string;
  description?: string | null;
  created_at?: Date | null;
  upvotes_count?: number | null;
}
const problems = {
  tableName: 'problems',
  columns: ['id', 'user_id', 'title', 'description', 'created_at', 'upvotes_count'],
  requiredForInsert: ['user_id', 'title'],
  primaryKey: 'id',
  foreignKeys: { user_id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as Problems,
  $input: null as unknown as ProblemsInput
} as const;

// Table products
export interface Products {
  id: string;
  active: boolean | null;
  name: string | null;
  description: string | null;
  image: string | null;
  metadata: Json | null;
}
export interface ProductsInput {
  id: string;
  active?: boolean | null;
  name?: string | null;
  description?: string | null;
  image?: string | null;
  metadata?: Json | null;
}
const products = {
  tableName: 'products',
  columns: ['id', 'active', 'name', 'description', 'image', 'metadata'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: {},
  $type: null as unknown as Products,
  $input: null as unknown as ProductsInput
} as const;

// Table subscriptions
export interface Subscriptions {
  id: string;
  user_id: string;
  status: subscription_status | null;
  metadata: Json | null;
  price_id: string | null;
  quantity: number | null;
  cancel_at_period_end: boolean | null;
  created: Date;
  current_period_start: Date;
  current_period_end: Date;
  ended_at: Date | null;
  cancel_at: Date | null;
  canceled_at: Date | null;
  trial_start: Date | null;
  trial_end: Date | null;
}
export interface SubscriptionsInput {
  id: string;
  user_id: string;
  status?: subscription_status | null;
  metadata?: Json | null;
  price_id?: string | null;
  quantity?: number | null;
  cancel_at_period_end?: boolean | null;
  created?: Date;
  current_period_start?: Date;
  current_period_end?: Date;
  ended_at?: Date | null;
  cancel_at?: Date | null;
  canceled_at?: Date | null;
  trial_start?: Date | null;
  trial_end?: Date | null;
}
const subscriptions = {
  tableName: 'subscriptions',
  columns: ['id', 'user_id', 'status', 'metadata', 'price_id', 'quantity', 'cancel_at_period_end', 'created', 'current_period_start', 'current_period_end', 'ended_at', 'cancel_at', 'canceled_at', 'trial_start', 'trial_end'],
  requiredForInsert: ['id', 'user_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'users', column: 'id', $type: null as unknown as Users },
    price_id: { table: 'prices', column: 'id', $type: null as unknown as Prices },
  },
  $type: null as unknown as Subscriptions,
  $input: null as unknown as SubscriptionsInput
} as const;

// Table upvotes
export interface Upvotes {
  id: number;
  user_id: string;
  problem_id: string;
  is_upvote: boolean | null;
}
export interface UpvotesInput {
  id?: number;
  user_id: string;
  problem_id: string;
  is_upvote?: boolean | null;
}
const upvotes = {
  tableName: 'upvotes',
  columns: ['id', 'user_id', 'problem_id', 'is_upvote'],
  requiredForInsert: ['user_id', 'problem_id'],
  primaryKey: 'id',
  foreignKeys: {
    user_id: { table: 'users', column: 'id', $type: null as unknown as Users },
    problem_id: { table: 'problems', column: 'id', $type: null as unknown as Problems },
  },
  $type: null as unknown as Upvotes,
  $input: null as unknown as UpvotesInput
} as const;

// Table users
export interface Users {
  id: string;
  full_name: string | null;
  avatar_url: string | null;
  billing_address: Json | null;
  payment_method: Json | null;
}
export interface UsersInput {
  id: string;
  full_name?: string | null;
  avatar_url?: string | null;
  billing_address?: Json | null;
  payment_method?: Json | null;
}
const users = {
  tableName: 'users',
  columns: ['id', 'full_name', 'avatar_url', 'billing_address', 'payment_method'],
  requiredForInsert: ['id'],
  primaryKey: 'id',
  foreignKeys: { id: { table: 'users', column: 'id', $type: null as unknown as Users }, },
  $type: null as unknown as Users,
  $input: null as unknown as UsersInput
} as const;


export interface TableTypes {
  customers: {
    select: Customers;
    input: CustomersInput;
  };
  prices: {
    select: Prices;
    input: PricesInput;
  };
  problems: {
    select: Problems;
    input: ProblemsInput;
  };
  products: {
    select: Products;
    input: ProductsInput;
  };
  subscriptions: {
    select: Subscriptions;
    input: SubscriptionsInput;
  };
  upvotes: {
    select: Upvotes;
    input: UpvotesInput;
  };
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  customers,
  prices,
  problems,
  products,
  subscriptions,
  upvotes,
  users,
}

export interface Database {
  public: {
    Tables: {
      customers: {
        Row: {
          id: string
          stripe_customer_id: string | null
        }
        Insert: {
          id: string
          stripe_customer_id?: string | null
        }
        Update: {
          id?: string
          stripe_customer_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "customers_id_fkey"
            columns: ["id"]
            isOneToOne: true
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      prices: {
        Row: {
          active: boolean | null
          currency: string | null
          id: string
          interval: Database["public"]["Enums"]["pricing_plan_interval"] | null
          interval_count: number | null
          product_id: string | null
          trial_period_days: number | null
          type: Database["public"]["Enums"]["pricing_type"] | null
          unit_amount: number | null
        }
        Insert: {
          active?: boolean | null
          currency?: string | null
          id: string
          interval?: Database["public"]["Enums"]["pricing_plan_interval"] | null
          interval_count?: number | null
          product_id?: string | null
          trial_period_days?: number | null
          type?: Database["public"]["Enums"]["pricing_type"] | null
          unit_amount?: number | null
        }
        Update: {
          active?: boolean | null
          currency?: string | null
          id?: string
          interval?: Database["public"]["Enums"]["pricing_plan_interval"] | null
          interval_count?: number | null
          product_id?: string | null
          trial_period_days?: number | null
          type?: Database["public"]["Enums"]["pricing_type"] | null
          unit_amount?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "prices_product_id_fkey"
            columns: ["product_id"]
            isOneToOne: false
            referencedRelation: "products"
            referencedColumns: ["id"]
          }
        ]
      }
      products: {
        Row: {
          active: boolean | null
          description: string | null
          id: string
          image: string | null
          metadata: Json | null
          name: string | null
        }
        Insert: {
          active?: boolean | null
          description?: string | null
          id: string
          image?: string | null
          metadata?: Json | null
          name?: string | null
        }
        Update: {
          active?: boolean | null
          description?: string | null
          id?: string
          image?: string | null
          metadata?: Json | null
          name?: string | null
        }
        Relationships: []
      }
      subscriptions: {
        Row: {
          cancel_at: string | null
          cancel_at_period_end: boolean | null
          canceled_at: string | null
          created: string
          current_period_end: string
          current_period_start: string
          ended_at: string | null
          id: string
          metadata: Json | null
          price_id: string | null
          quantity: number | null
          status: Database["public"]["Enums"]["subscription_status"] | null
          trial_end: string | null
          trial_start: string | null
          user_id: string
        }
        Insert: {
          cancel_at?: string | null
          cancel_at_period_end?: boolean | null
          canceled_at?: string | null
          created?: string
          current_period_end?: string
          current_period_start?: string
          ended_at?: string | null
          id: string
          metadata?: Json | null
          price_id?: string | null
          quantity?: number | null
          status?: Database["public"]["Enums"]["subscription_status"] | null
          trial_end?: string | null
          trial_start?: string | null
          user_id: string
        }
        Update: {
          cancel_at?: string | null
          cancel_at_period_end?: boolean | null
          canceled_at?: string | null
          created?: string
          current_period_end?: string
          current_period_start?: string
          ended_at?: string | null
          id?: string
          metadata?: Json | null
          price_id?: string | null
          quantity?: number | null
          status?: Database["public"]["Enums"]["subscription_status"] | null
          trial_end?: string | null
          trial_start?: string | null
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "subscriptions_price_id_fkey"
            columns: ["price_id"]
            isOneToOne: false
            referencedRelation: "prices"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "subscriptions_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
      users: {
        Row: {
          avatar_url: string | null
          billing_address: Json | null
          full_name: string | null
          id: string
          payment_method: Json | null
        }
        Insert: {
          avatar_url?: string | null
          billing_address?: Json | null
          full_name?: string | null
          id: string
          payment_method?: Json | null
        }
        Update: {
          avatar_url?: string | null
          billing_address?: Json | null
          full_name?: string | null
          id?: string
          payment_method?: Json | null
        }
        Relationships: [
          {
            foreignKeyName: "users_id_fkey"
            columns: ["id"]
            isOneToOne: true
            referencedRelation: "users"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      pricing_plan_interval: "day" | "week" | "month" | "year"
      pricing_type: "one_time" | "recurring"
      subscription_status:
        | "trialing"
        | "active"
        | "canceled"
        | "incomplete"
        | "incomplete_expired"
        | "past_due"
        | "unpaid"
        | "paused"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

export type TablesInsert<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
  ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
      Insert: infer I
    }
    ? I
    : never
  : never

export type TablesUpdate<
  PublicTableNameOrOptions extends
    | keyof Database["public"]["Tables"]
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicTableNameOrOptions["schema"]]["Tables"]
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : PublicTableNameOrOptions extends keyof Database["public"]["Tables"]
  ? Database["public"]["Tables"][PublicTableNameOrOptions] extends {
      Update: infer U
    }
    ? U
    : never
  : never

export type Enums<
  PublicEnumNameOrOptions extends
    | keyof Database["public"]["Enums"]
    | { schema: keyof Database },
  EnumName extends PublicEnumNameOrOptions extends { schema: keyof Database }
    ? keyof Database[PublicEnumNameOrOptions["schema"]]["Enums"]
    : never = never
> = PublicEnumNameOrOptions extends { schema: keyof Database }
  ? Database[PublicEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : PublicEnumNameOrOptions extends keyof Database["public"]["Enums"]
  ? Database["public"]["Enums"][PublicEnumNameOrOptions]
  : never

export type Tables<
  PublicTableNameOrOptions extends
    | keyof (Database["public"]["Tables"] & Database["public"]["Views"])
    | { schema: keyof Database },
  TableName extends PublicTableNameOrOptions extends { schema: keyof Database }
    ? keyof (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
        Database[PublicTableNameOrOptions["schema"]]["Views"])
    : never = never
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? (Database[PublicTableNameOrOptions["schema"]]["Tables"] &
      Database[PublicTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof (Database["public"]["Tables"] &
      Database["public"]["Views"])
  ? (Database["public"]["Tables"] &
      Database["public"]["Views"])[PublicTableNameOrOptions] extends {
      Row: infer R
    }
    ? R
    : never
  : never
